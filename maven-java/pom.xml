<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="
            http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <!-- 模型版本 -->
    <modelVersion>4.0.0</modelVersion>

    <!-- maven工程的坐标 -->
    <groupId>org.example.maven</groupId>
    <artifactId>maven-java</artifactId>
    <version>1.0-SNAPSHOT</version>

    <!--
        maven工程的打包方式
        jar (默认): 普通java项目打包方式，项目打成 jar 包
        war: web项目打包方式，项目打成 war 包
        pom: pom 方式不会将项目打包，这个项目作为父工程，被其他项目聚合或继承
    -->
    <packaging>jar</packaging>

    <properties>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <!-- 配置junit版本号 -->
        <junit.version>4.13.2</junit.version>
    </properties>

    <dependencies>
        <!-- 导入 junit 依赖 -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <!-- 使用 properties 中定义的属性值 -->
            <version>${junit.version}</version>
            <!--
                scope 为 test 时，表示 jar 包只在 测试环境中生效
            -->
            <scope>test</scope>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.alibaba/druid -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid</artifactId>
            <version>1.2.8</version>
            <!--
                scope 的默认值为 compile
                此时依赖的 jar 包可以在 编译环境，测试环境，运行环境中生效
            -->
            <scope>compile</scope>
        </dependency>

        <!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>4.0.1</version>
            <!--
                scope 为 scope 时，依赖的 jar 包在编译环境，测试环境中生效，生产环境已经存在对应的jar，因此该依赖不会打包到生产环境中
            -->
            <scope>provided</scope>
        </dependency>

    </dependencies>

    <build>
        <!--
            自定义打包名称，jar包产物的名称
        -->
        <finalName>maven-java-output</finalName>

        <!--
            配置自定义打包的资源位置
            例如: 配置将 src.org.example.mapper 目录下的所有 .xml 结尾的文件都打包到 jar 包中
        -->
        <resources>
            <resource>
                <!-- 配置包目录 -->
                <directory>src/main/java/org/example/mapper</directory>
                <includes>
                    <!--
                        配置匹配规则
                        ** 表示 directory 目录下(包含子目录)
                        *.xml 表示任意 .xml 结尾的文件
                    -->
                    <include>**/*.xml</include>
                </includes>
            </resource>
        </resources>
    </build>

</project>